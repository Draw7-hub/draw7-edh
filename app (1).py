
import streamlit as st
import pandas as pd

# ------------------ Setup session ------------------
if 'players' not in st.session_state:
    st.session_state.players = {}
if 'rounds' not in st.session_state:
    st.session_state.rounds = []
if 'results' not in st.session_state:
    st.session_state.results = []
if 'current_round' not in st.session_state:
    st.session_state.current_round = 0
if 'max_rounds' not in st.session_state:
    st.session_state.max_rounds = 3
if 'group_size' not in st.session_state:
    st.session_state.group_size = 4

# ------------------ Style for theme ------------------
primary_color = "#0047AB"  # ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
secondary_color = "#D32F2F"  # ‡πÅ‡∏î‡∏á
accent_color = "#FFFFFF"  # ‡∏Ç‡∏≤‡∏ß

st.markdown(f"""
<style>
    .main > div {{
        color: {primary_color};
    }}
    .stButton > button {{
        background-color: {primary_color};
        color: {accent_color};
        border-radius: 8px;
        border: none;
        padding: 8px 15px;
        font-weight: bold;
    }}
    .stButton > button:hover {{
        background-color: {secondary_color};
        color: {accent_color};
    }}
    .css-1aumxhk {{
        background-color: {accent_color} !important;
    }}
    .stTextInput>div>input {{
        border-radius: 8px;
        border: 1.5px solid {primary_color};
        padding: 5px 10px;
    }}
    .stTextArea>div>textarea {{
        border-radius: 8px;
        border: 1.5px solid {primary_color};
        padding: 8px 10px;
    }}
    .stSelectbox>div>div>div>div {{
        border-radius: 8px;
        border: 1.5px solid {primary_color};
        padding: 5px 10px;
    }}
</style>
""", unsafe_allow_html=True)

# ------------------ Title ------------------
st.title("üé¥ Draw 7 EDH Pairing")
st.caption("MTG Commander tournament pairing with Elo-like system")

# ------------------ Sidebar ------------------
with st.sidebar:
    st.header("‚öôÔ∏è Setup")

    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
    group_size = st.selectbox("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°", options=[3, 4, 5], index=[3,4,5].index(st.session_state.group_size))
    st.session_state.group_size = group_size

    max_r = st.number_input("‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö", 1, 20, value=st.session_state.max_rounds)
    if st.button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö"):
        st.session_state.max_rounds = max_r

    new_player = st.text_input("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà")
    if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô"):
        if new_player and new_player not in st.session_state.players:
            st.session_state.players[new_player] = 1000
            st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô '{new_player}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        elif new_player in st.session_state.players:
            st.warning("‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")

    if st.button("üóë ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        st.session_state.players = {}
        st.session_state.rounds = []
        st.session_state.results = []
        st.session_state.current_round = 0
        st.success("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ------------------ Player List ------------------
st.subheader("üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô")
if st.session_state.players:
    df = pd.DataFrame.from_dict(st.session_state.players, orient='index', columns=['‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'])
    st.dataframe(df.sort_values("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", ascending=False))
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô")

# ------------------ Pairing ------------------
st.subheader(f"üîÑ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {st.session_state.current_round + 1} / {st.session_state.max_rounds}")

if st.button("üîÄ ‡∏à‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà"):
    if st.session_state.current_round >= st.session_state.max_rounds:
        st.warning("‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß")
    elif len(st.session_state.players) < st.session_state.group_size:
        st.warning(f"‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {st.session_state.group_size} ‡∏Ñ‡∏ô")
    else:
        sorted_players = sorted(st.session_state.players.items(), key=lambda x: -x[1])
        groups = [sorted_players[i:i+st.session_state.group_size] for i in range(0, len(sorted_players), st.session_state.group_size)]
        st.session_state.rounds.append(groups)
        st.session_state.current_round += 1
        st.success(f"‡∏à‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≠‡∏ö {st.session_state.current_round} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ------------------ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏•‡∏∏‡πà‡∏° ------------------
if st.session_state.rounds:
    st.markdown("### üìã ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)")
    last_round = st.session_state.rounds[-1]
    new_groups = []
    for i, group in enumerate(last_round):
        st.markdown(f"**‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {i+1}**")
        group_names = [name for name, _ in group]
        # ‡πÅ‡∏™‡∏î‡∏á textbox ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)
        edited = st.text_area(f"‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÇ‡∏ï‡πä‡∏∞ {i+1} (‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠)", value="\n".join(group_names), key=f"group_edit_{i}")
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô list ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô default 1000 ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà
        names = [n.strip() for n in edited.split("\n") if n.strip()]
        updated_group = []
        for n in names:
            score = st.session_state.players.get(n, 1000)
            st.session_state.players[n] = score
            updated_group.append((n, score))
        new_groups.append(updated_group)
    st.session_state.rounds[-1] = new_groups

# ------------------ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô ------------------
if st.session_state.rounds and st.button("‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ"):
    round_result = []
    for i, group in enumerate(st.session_state.rounds[-1]):
        names = [name for name, _ in group]
        winner = st.selectbox(f"‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞ {i+1}", names, key=f"win_{i}")
        if winner:
            losers = [n for n in names if n != winner]
            win_score = st.session_state.players[winner]
            st.session_state.players[winner] = int(win_score * 1.07)
            for loser in losers:
                lose_score = st.session_state.players[loser]
                st.session_state.players[loser] = int(lose_score * 0.93)
            round_result.append((winner, losers))
    st.session_state.results.append(round_result)
    st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ------------------ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö ------------------
if st.button("üìä ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"):
    st.subheader("üèÅ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
    final_df = pd.DataFrame.from_dict(st.session_state.players, orient='index', columns=['‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'])
    final_df = final_df.sort_values("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", ascending=False).reset_index()
    final_df.index += 1
    final_df.columns = ["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"]
    st.table(final_df)
