# app.py
import streamlit as st
import pandas as pd
import time
from datetime import datetime, timedelta

# ------------------ Setup session ------------------
if 'players' not in st.session_state:
    st.session_state.players = {}
if 'rounds' not in st.session_state:
    st.session_state.rounds = []
if 'results' not in st.session_state:
    st.session_state.results = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
if 'current_round' not in st.session_state:
    st.session_state.current_round = 0
if 'max_rounds' not in st.session_state:
    st.session_state.max_rounds = 3
if 'group_size' not in st.session_state:
    st.session_state.group_size = 4
if 'pending_winners' not in st.session_state:
    st.session_state.pending_winners = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
if 'round_time' not in st.session_state:
    st.session_state.round_time = 75  # ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö (‡∏ô‡∏≤‡∏ó‡∏µ)
if 'round_start_time' not in st.session_state:
    st.session_state.round_start_time = None
if 'timer_active' not in st.session_state:
    st.session_state.timer_active = False
if 'time_alerts_shown' not in st.session_state:
    st.session_state.time_alerts_shown = set()  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
if 'show_popup' not in st.session_state:
    st.session_state.show_popup = False
if 'popup_message' not in st.session_state:
    st.session_state.popup_message = ""

# ------------------ Style for theme ------------------
primary_color = "#0047AB"  # ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
secondary_color = "#D32F2F"  # ‡πÅ‡∏î‡∏á
accent_color = "#FFFFFF"  # ‡∏Ç‡∏≤‡∏ß

st.markdown(f"""
<style>
    /* Mobile-first responsive design */
    .main > div {{
        color: {primary_color};
        padding: 0 10px;
    }}
    
    .stButton > button {{
        background-color: {primary_color};
        color: {accent_color};
        border-radius: 8px;
        border: none;
        padding: 12px 20px;
        font-weight: bold;
        width: 100%;
        margin: 4px 0;
        font-size: 16px;
        min-height: 48px;
    }}
    
    .stButton > button:hover {{
        background-color: {secondary_color};
        color: {accent_color};
    }}
    
    .css-1aumxhk {{
        background-color: {accent_color} !important;
    }}
    
    .stTextInput>div>input {{
        border-radius: 8px;
        border: 1.5px solid {primary_color};
        padding: 12px 16px;
        font-size: 16px;
        width: 100%;
        min-height: 48px;
    }}
    
    .stTextArea>div>textarea {{
        border-radius: 8px;
        border: 1.5px solid {primary_color};
        padding: 12px 16px;
        font-size: 16px;
        min-height: 120px;
    }}
    
    .stSelectbox>div>div>div>div {{
        border-radius: 8px;
        border: 1.5px solid {primary_color};
        padding: 12px 16px;
        font-size: 16px;
        min-height: 48px;
    }}
    
    .remove-btn {{
        background-color: {secondary_color};
        color: {accent_color};
        border-radius: 5px;
        padding: 8px 12px;
        font-size: 14px;
        margin-left: 8px;
        border: none;
        cursor: pointer;
        min-height: 40px;
    }}
    
    /* Timer display - ‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô */
    .timer-display {{
        text-align: center;
        padding: 40px 30px;
        border-radius: 20px;
        color: white;
        font-size: 72px;
        font-weight: bold;
        margin: 30px 0;
        box-shadow: 0 8px 16px rgba(0,0,0,0.3);
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }}
    
    /* Popup styles */
    .popup-overlay {{
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0,0,0,0.8);
        z-index: 9999;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
        box-sizing: border-box;
    }}
    
    .popup-content {{
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 40px 30px;
        border-radius: 20px;
        box-shadow: 0 12px 24px rgba(0,0,0,0.4);
        text-align: center;
        max-width: 90%;
        width: 400px;
        animation: popup-slide 0.3s ease-out;
    }}
    
    @keyframes popup-slide {{
        from {{
            transform: translateY(-50px);
            opacity: 0;
        }}
        to {{
            transform: translateY(0);
            opacity: 1;
        }}
    }}
    
    .popup-message {{
        font-size: 28px;
        font-weight: bold;
        margin-bottom: 25px;
        line-height: 1.3;
    }}
    
    .popup-close-btn {{
        background-color: white;
        color: {primary_color};
        border: none;
        padding: 15px 30px;
        border-radius: 10px;
        font-size: 18px;
        cursor: pointer;
        font-weight: bold;
        min-width: 100px;
        transition: all 0.2s ease;
    }}
    
    .popup-close-btn:hover {{
        background-color: #f0f0f0;
        transform: translateY(-2px);
    }}
    
    /* Mobile responsive */
    @media (max-width: 768px) {{
        .timer-display {{
            font-size: 48px;
            padding: 25px 20px;
            margin: 20px 0;
        }}
        
        .popup-content {{
            padding: 30px 20px;
            width: 95%;
            margin: 0 10px;
        }}
        
        .popup-message {{
            font-size: 22px;
        }}
        
        .stButton > button {{
            padding: 16px 20px;
            font-size: 18px;
            min-height: 52px;
        }}
        
        .main > div {{
            padding: 0 5px;
        }}
        
        .stTextInput>div>input, .stSelectbox>div>div>div>div {{
            padding: 14px 16px;
            font-size: 18px;
            min-height: 52px;
        }}
    }}
    
    @media (max-width: 480px) {{
        .timer-display {{
            font-size: 36px;
            padding: 20px 15px;
        }}
        
        .popup-message {{
            font-size: 20px;
        }}
        
        .popup-close-btn {{
            padding: 12px 24px;
            font-size: 16px;
        }}
    }}
    
    /* Sidebar responsive */
    .css-1d391kg {{
        padding: 1rem 0.5rem;
    }}
    
    /* Table responsive */
    .stTable {{
        font-size: 16px;
    }}
    
    @media (max-width: 768px) {{
        .stTable {{
            font-size: 14px;
        }}
    }}
    
    @media (max-width: 480px) {{
        .stTable {{
            font-size: 12px;
        }}
    }}
    
    /* Player list responsive */
    .player-row {{
        display: flex;
        align-items: center;
        margin-bottom: 8px;
        padding: 8px;
        border-radius: 8px;
        background-color: #f8f9fa;
    }}
    
    @media (max-width: 768px) {{
        .player-row {{
            flex-direction: column;
            align-items: stretch;
        }}
    }}
</style>
""", unsafe_allow_html=True)

# ------------------ Popup Component ------------------
def show_popup():
    if st.session_state.show_popup:
        popup_html = f"""
        <div class="popup-overlay" onclick="closePopup()">
            <div class="popup-content" onclick="event.stopPropagation();">
                <div class="popup-message">{st.session_state.popup_message}</div>
                <button class="popup-close-btn" onclick="closePopup()">OK</button>
            </div>
        </div>
        <script>
            function closePopup() {{
                window.parent.postMessage({{type: 'streamlit:setComponentValue', value: 'close_popup'}}, '*');
            }}
        </script>
        """
        st.components.v1.html(popup_html, height=0)

# Function to trigger popup
def trigger_popup(message):
    st.session_state.show_popup = True
    st.session_state.popup_message = message

# ------------------ Title ------------------
st.title("üé¥ Draw 7 EDH Pairing")
st.caption("Powered by Balu Draw Seven")

# ------------------ Sidebar ------------------
with st.sidebar:
    st.header("‚öôÔ∏è Setup")

    group_size = st.selectbox("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°", options=[3, 4, 5], index=[3,4,5].index(st.session_state.group_size))
    st.session_state.group_size = group_size

    max_r = st.number_input("‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö", 1, 20, value=st.session_state.max_rounds)
    if st.button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö"):
        st.session_state.max_rounds = max_r

    st.markdown("---")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
    st.subheader("‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö")
    time_options = [60, 75, 90]
    round_time = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö (‡∏ô‡∏≤‡∏ó‡∏µ)", 
                              options=time_options, 
                              index=time_options.index(st.session_state.round_time))
    st.session_state.round_time = round_time

    new_player = st.text_input("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà")
    if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô"):
        if new_player and new_player not in st.session_state.players:
            st.session_state.players[new_player] = 1000
            st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô '{new_player}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        elif new_player in st.session_state.players:
            st.warning("‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")

    if st.button("üóë ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        st.session_state.players = {}
        st.session_state.rounds = []
        st.session_state.results = []
        st.session_state.current_round = 0
        st.session_state.pending_winners = {}
        st.session_state.round_start_time = None
        st.session_state.timer_active = False
        st.session_state.time_alerts_shown = set()
        st.session_state.show_popup = False
        st.success("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ------------------ Handle popup close ------------------
if hasattr(st, 'query_params'):
    query_params = st.query_params
    if 'close_popup' in query_params:
        st.session_state.show_popup = False
        st.query_params.clear()

# ------------------ Player List with remove button ------------------
st.subheader("üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô")
if st.session_state.players:
    df = pd.DataFrame.from_dict(st.session_state.players, orient='index', columns=['‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'])
    df = df.sort_values("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", ascending=False).reset_index()
    df.index += 1
    df.columns = ["‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"]
    df_display = df.copy()
    df_display.insert(0, "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", df.index)
    for idx, row in df_display.iterrows():
        col1, col2, col3, col4 = st.columns([1,4,2,1])
        with col1:
            st.write(f"**{row['‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö']}**")
        with col2:
            st.write(row["‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô"])
        with col3:
            st.write(f"{row['‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô']}")
        with col4:
            btn_label = f"‡∏•‡∏ö"
            if st.button(btn_label, key=f"remove_{row['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô']}", help=f"‡∏•‡∏ö {row['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô']}"):
                # ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
                st.session_state.players.pop(row['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô'], None)
                # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å pending_winners ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                st.session_state.pending_winners = {k:v for k,v in st.session_state.pending_winners.items() if v != row['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô']}
                st.rerun()
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô")

# ------------------ Pairing ------------------
st.subheader(f"üîÑ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {st.session_state.current_round + 1} / {st.session_state.max_rounds}")

# ------------------ Timer Display and Logic ------------------
if st.session_state.timer_active and st.session_state.round_start_time:
    current_time = datetime.now()
    elapsed_time = current_time - st.session_state.round_start_time
    total_seconds = st.session_state.round_time * 60
    elapsed_seconds = int(elapsed_time.total_seconds())
    remaining_seconds = max(0, total_seconds - elapsed_seconds)
    
    # Check for time alerts
    remaining_minutes = remaining_seconds // 60
    
    # Alert triggers
    alert_times = [15, 10, 5, 0]  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 15, 10, 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    
    for alert_time in alert_times:
        if alert_time not in st.session_state.time_alerts_shown:
            if alert_time == 0 and remaining_seconds == 0:
                trigger_popup("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß!")
                st.session_state.time_alerts_shown.add(alert_time)
            elif alert_time > 0 and remaining_minutes == alert_time and remaining_seconds % 60 < 10:
                trigger_popup(f"‚ö†Ô∏è ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å {alert_time} ‡∏ô‡∏≤‡∏ó‡∏µ!")
                st.session_state.time_alerts_shown.add(alert_time)
    
    if remaining_seconds > 0:
        minutes = remaining_seconds // 60
        seconds = remaining_seconds % 60
        
        # ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        if remaining_seconds > total_seconds * 0.5:
            color = "linear-gradient(135deg, #4CAF50, #45a049)"  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        elif remaining_seconds > total_seconds * 0.25:
            color = "linear-gradient(135deg, #FF9800, #f57c00)"  # ‡∏™‡πâ‡∏°
        else:
            color = "linear-gradient(135deg, #F44336, #d32f2f)"  # ‡πÅ‡∏î‡∏á
        
        st.markdown(f"""
        <div class="timer-display" style="background: {color};">
            ‚è∞ {minutes:02d}:{seconds:02d}
        </div>
        """, unsafe_allow_html=True)
        
        # Auto refresh every second
        time.sleep(1)
        st.rerun()
    else:
        st.markdown("""
        <div class="timer-display" style="background: linear-gradient(135deg, #F44336, #d32f2f);">
            ‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤!
        </div>
        """, unsafe_allow_html=True)

# Show popup if needed
show_popup()

# Timer controls
if st.session_state.rounds and not st.session_state.timer_active:
    if st.button("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ"):
        st.session_state.round_start_time = datetime.now()
        st.session_state.timer_active = True
        st.session_state.time_alerts_shown = set()  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        st.success(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ {st.session_state.round_time} ‡∏ô‡∏≤‡∏ó‡∏µ")
        st.rerun()

if st.session_state.timer_active:
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤"):
            st.session_state.timer_active = False
            st.info("‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
    with col2:
        if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤"):
            st.session_state.round_start_time = datetime.now()
            st.session_state.time_alerts_shown = set()  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            st.success("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
            st.rerun()

def can_start_new_round():
    return st.session_state.current_round < st.session_state.max_rounds

if st.button("üîÄ ‡∏à‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà"):
    if not can_start_new_round():
        st.warning("‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß")
    elif len(st.session_state.players) < st.session_state.group_size:
        st.warning(f"‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {st.session_state.group_size} ‡∏Ñ‡∏ô")
    else:
        sorted_players = sorted(st.session_state.players.items(), key=lambda x: -x[1])
        groups = [sorted_players[i:i+st.session_state.group_size] for i in range(0, len(sorted_players), st.session_state.group_size)]
        st.session_state.rounds.append(groups)
        st.session_state.current_round += 1
        st.session_state.pending_winners = {}
        st.session_state.timer_active = False
        st.session_state.round_start_time = None
        st.session_state.time_alerts_shown = set()  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        st.success(f"‡∏à‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≠‡∏ö {st.session_state.current_round} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ------------------ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏•‡∏∏‡πà‡∏° ------------------
if st.session_state.rounds:
    st.markdown("### üìã ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)")
    last_round = st.session_state.rounds[-1]
    new_groups = []
    for i, group in enumerate(last_round):
        st.markdown(f"**‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {i+1}**")
        group_names = [name for name, _ in group]
        edited = st.text_area(f"‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÇ‡∏ï‡πä‡∏∞ {i+1} (‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠)", value="\n".join(group_names), key=f"group_edit_{i}")
        names = [n.strip() for n in edited.split("\n") if n.strip()]
        updated_group = []
        for n in names:
            score = st.session_state.players.get(n, 1000)
            st.session_state.players[n] = score
            updated_group.append((n, score))
        new_groups.append(updated_group)
    st.session_state.rounds[-1] = new_groups

# ------------------ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô ------------------
if st.session_state.rounds:
    st.subheader("‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")

    last_round = st.session_state.rounds[-1]

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞ (‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô pending_winners)
    for i, group in enumerate(last_round):
        names = [name for name, _ in group]
        st.markdown(f"**‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {i+1}**")
        sorted_players = sorted(st.session_state.players.items(), key=lambda x: -x[1])
        rank_map = {name: rank+1 for rank, (name, _) in enumerate(sorted_players)}
        for name in names:
            rank = rank_map.get(name, "-")
            st.write(f"{rank}. {name}")

        winner_key = f"winner_select_{i}_round{st.session_state.current_round}"
        selected_winner = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞", options=names, key=winner_key)

        # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô pending_winners
        st.session_state.pending_winners[i] = selected_winner

    # ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏ö
    if st.button("‚úîÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ"):
        if len(st.session_state.pending_winners) != len(last_round):
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")
        elif None in st.session_state.pending_winners.values():
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")
        else:
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏£‡∏¥‡∏á
            for i, group in enumerate(last_round):
                winner = st.session_state.pending_winners.get(i)
                if winner:
                    losers = [n for n, _ in group if n != winner]
                    win_score = st.session_state.players[winner]
                    st.session_state.players[winner] = int(win_score * 1.07)
                    for loser in losers:
                        lose_score = st.session_state.players[loser]
                        st.session_state.players[loser] = int(lose_score * 0.93)
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
            st.session_state.results.append(st.session_state.pending_winners.copy())
            st.session_state.pending_winners = {}
            st.session_state.timer_active = False
            st.session_state.round_start_time = None
            st.session_state.time_alerts_shown = set()  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ------------------ ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ------------------
if st.button("üìä ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"):
    st.subheader("üèÅ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
    df = pd.DataFrame.from_dict(st.session_state.players, orient='index', columns=['‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'])
    df = df.sort_values("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", ascending=False).reset_index()
    df.index += 1
    df.columns = ["‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"]
    df_display = df.copy()
    df_display.insert(0, "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", df.index)
    st.table(df_display)

# ------------------ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ô‡∏ä‡∏ô‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö (‡∏™‡∏£‡∏∏‡∏õ) ------------------
if st.session_state.results:
    st.subheader("üèÜ ‡∏Ñ‡∏ô‡∏ä‡∏ô‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö")
    for r, winners in enumerate(st.session_state.results, start=1):
        st.write(f"‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {r}:")
        for table_idx, winner in winners.items():
            st.write(f"  ‡πÇ‡∏ï‡πä‡∏∞ {table_idx+1}: {winner}")